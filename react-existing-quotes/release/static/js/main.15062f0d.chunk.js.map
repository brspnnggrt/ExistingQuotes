{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","state","loading","columns","title","field","type","lookup","34","63","data","name","surname","birthYear","birthCity","onMessageReceived","event","source","console","log","setState","map","col","rows","row","keys","cells","slice","t","columnName","values","value","Object","fromEntries","_","i","window","addEventListener","className","src","logo","alt","this","actions","icon","tooltip","onClick","rowData","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAAe,MAA0B,iC,mCCkE1BA,E,kDAxDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAS,EAETC,QAAS,CACP,CAAEC,MAAO,WAAOC,MAAO,QACvB,CAAED,MAAO,cAAUC,MAAO,WAC1B,CAAED,MAAO,4BAAcC,MAAO,YAAaC,KAAM,WACjD,CAAEF,MAAO,kBAAcC,MAAO,YAAaE,OAAQ,CAAEC,GAAI,gBAAYC,GAAI,yBAE3EC,KAAM,CAAC,CAAEC,KAAM,SAAUC,QAAS,QAASC,UAAW,KAAMC,UAAW,MAEzE,EAAKC,kBAAoB,SAAAC,GAClBA,EAAMN,KAAKO,SACdC,QAAQC,IAAIH,EAAMN,MAClB,EAAKU,SAAS,CACZlB,SAAS,EACTC,QAASa,EAAMN,KAAKP,QAAQkB,KAAI,SAAAC,GAAS,MAAO,CAAElB,MAAOkB,EAAIlB,MAAOC,MAAOiB,EAAIX,SAC/ED,KAAMM,EAAMN,KAAKa,KAAKF,KAAI,SAAAG,GACxB,IAAIC,EAAOD,EAAIE,MAAMC,MAAM,GAAGN,KAAI,SAAAO,GAAC,OAAIA,EAAEC,cACrCC,EAASN,EAAIE,MAAMC,MAAM,GAAGN,KAAI,SAAAO,GAAC,OAAIA,EAAEG,SAE3C,OADWC,OAAOC,YAAYR,EAAKJ,KAAI,SAACa,EAAGC,GAAJ,MAAU,CAACV,EAAKU,GAAIL,EAAOK,eAM1EC,OAAOC,iBAAiB,UAAW,EAAKtB,mBAAmB,GA5B1C,E,0CA+BnB,WACE,OACE,sBAAKuB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,WAE3C,cAAC,IAAD,CACItC,QAASuC,KAAKzC,MAAME,QACpBO,KAAMgC,KAAKzC,MAAMS,KACjBN,MAAM,aACNuC,QAAS,CACP,CACEC,KAAM,OACNC,QAAS,YACTC,QAAS,SAAC9B,EAAO+B,gB,GA/CfC,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.15062f0d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nimport { Component } from 'react'\nimport MaterialTable from 'material-table'\n\n// Get data from CPQ using iframe.contentWindow.postMessage(ko.toJSON(cpq.models.cartList.mainGrid), \"https://brspnnggrt.github.io/\")\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      // default columns & row data\n      columns: [\n        { title: 'Adı', field: 'name' },\n        { title: 'Soyadı', field: 'surname' },\n        { title: 'Doğum Yılı', field: 'birthYear', type: 'numeric' },\n        { title: 'Doğum Yeri', field: 'birthCity', lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' } }\n      ],\n      data: [{ name: 'Mehmet', surname: 'Baran', birthYear: 1987, birthCity: 63 }],\n    };\n    this.onMessageReceived = event => {\n      if (!event.data.source) {\n        console.log(event.data);\n        this.setState({\n          loading: false,\n          columns: event.data.columns.map(col => { return { title: col.title, field: col.name}; }),\n          data: event.data.rows.map(row => { \n            let keys = row.cells.slice(1).map(t => t.columnName);\n            let values = row.cells.slice(1).map(t => t.value);\n            let data = Object.fromEntries(keys.map((_, i) => [keys[i], values[i]]));\n            return data;\n          })\n        });\n      }\n    };\n    window.addEventListener(\"message\", this.onMessageReceived, false);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <MaterialTable\n            columns={this.state.columns}\n            data={this.state.data}\n            title=\"Demo Title\"\n            actions={[\n              {\n                icon: 'save',\n                tooltip: 'Save User',\n                onClick: (event, rowData) => {\n                  // Do save operation\n                }\n              }\n            ]}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}